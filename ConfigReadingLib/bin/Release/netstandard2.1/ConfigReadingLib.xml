<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConfigReadingLib</name>
    </assembly>
    <members>
        <member name="T:ConfigReadingLib.BadConfException">
            <summary>
            BadConfException
            </summary>
        </member>
        <member name="M:ConfigReadingLib.BadConfException.#ctor">
            <summary>
            BadConfException
            </summary>
        </member>
        <member name="M:ConfigReadingLib.BadConfException.#ctor(System.String)">
            <summary>
            BadConfException
            </summary>
        </member>
        <member name="M:ConfigReadingLib.BadConfException.#ctor(System.String,System.Exception)">
            <summary>
            BadConfException
            </summary>
        </member>
        <member name="T:ConfigReadingLib.ConfigInfo">
            <summary>
            Class ConfigInfo contains the infomation of key, value and comment.
            </summary>
        </member>
        <member name="P:ConfigReadingLib.ConfigInfo.Key">
            <summary>
            Key can not be set as null or white space.
            </summary>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="P:ConfigReadingLib.ConfigInfo.Value">
            <summary>
            Value can not be set as null or white space.
            </summary>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="P:ConfigReadingLib.ConfigInfo.Comment">
            <summary>
            Comment can be omitted.
            </summary>
        </member>
        <member name="T:ConfigReadingLib.ConfigReader">
            <summary>
            ConfigReader Class.
            Create ConfigReader's instance to read and write config file.
            Access method Create to create a new config file.
            </summary>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Read Config File.
            Config file's format should be like as above:
            <para>A key = Value A  {commentout symbol} Comment</para>
            Key and value will be separated with the first '='.
            Blank space around '=' will be ignored.
            <para>Key and value that include blank space is acceptable.
            Key and value are case sensitive.
            Key should be unique.</para>
            </summary>
            <param name="path">The path Specified is exist.</param>
            <param name="symbol">Comment out symbol to set. Default is '//'.</param>
            <param name="strict">
            If true, the config file's format will be checked strictly.
            Any meaningless chars will not be accepted.
            </param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SetPropertiesFromKeys(System.Object,ConfigReadingLib.ParseFromString,System.Boolean)">
            <summary>
            Set all properties value contained within the class specified from the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="exactmatch">
            If true, any property failed to set value from the keys will throw exception.
            </param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SetPropertiesFromKeys(System.Object,ConfigReadingLib.ParseFromString,System.String[],System.Boolean)">
            <summary>
            Set properties value contained within the class specified from the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="keys">
            Specify the keys that need to be set. 
            </param>
            <param name="exactmatch">
            If true, any property failed to set value from the keys will throw exception.
            </param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SetFieldsFromKeys(System.Object,ConfigReadingLib.ParseFromString,System.Boolean)">
            <summary>
            Set all fields value contained within the class specified from the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="exactmatch">
            If true, any field failed to set value from the keys will throw exception.
            </param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SetFieldsFromKeys(System.Object,ConfigReadingLib.ParseFromString,System.String[],System.Boolean)">
            <summary>
            Set fields value contained within the class specified from the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="keys">
            Specify the keys that need to be set.
            </param>
            <param name="exactmatch">
            If true, any field failed to set value from the keys will throw exception.
            </param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.GetAllKeys">
            <summary>
            Get all keys existed in the config file.
            </summary>
            <returns>An array contained all keys existed in config file.</returns>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.ContainsKey(System.String)">
            <summary>
            Determine whether the config file contains the specified key.
            </summary>
            <param name="key"></param>
            <returns>true if config contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.TryGetValue(System.String,System.String@)">
            <summary>
            Try to get the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>true if config contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.GetValue(System.String)">
            <summary>
            Get the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <returns>An element contained with the specified key.</returns>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.TryChangeValue(System.String,System.String,System.Boolean)">
            <summary>
            Try to change the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="save">If true, everything changed will be saved to the config file immediately.</param>
            <returns>true if the value the specified key changed successfully; otherwise, false.</returns>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.ChangeValue(System.String,System.String,System.Boolean)">
            <summary>
            Change the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="save">If true, everything changed will be saved to the config file immediately.</param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.AddConfig(ConfigReadingLib.ConfigInfo[],System.Boolean)">
            <summary>
            Add configs.
            </summary>
            <param name="configInfos">ConfigInfos.</param>
            <param name="save">If true, everything changed will be saved to the config file immediately.</param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SavePropertiesToKeys(System.Object,ConfigReadingLib.ParseToString,System.Boolean,System.Boolean)">
            <summary>
            Save all properties value contained within the class specified to the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="exactmatch">If true, any key failed to save from the properties will throw exception.</param>
            <param name="save">If true, everything changed will be saved to the config file immediately.</param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SavePropertiesToKeys(System.Object,ConfigReadingLib.ParseToString,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Save properties value contained within the class specified to the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="keys">Specify the keys that need to be save. </param>
            <param name="exactmatch">If true, any key failed to save from the properties will throw exception.</param>
            <param name="save">If true, everything changed will be saved to the config file immediately.</param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SaveFieldsToKeys(System.Object,ConfigReadingLib.ParseToString,System.Boolean,System.Boolean)">
            <summary>
            Save all fields value contained within the class specified to the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="strict">If true, any key failed to save from fields will throw exception.</param>
            <param name="exactmatch">If true, everything changed will be saved to the config file immediately.</param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SaveFieldsToKeys(System.Object,ConfigReadingLib.ParseToString,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Save fields value contained within the class specified to the existent keys.
            </summary>
            <param name="obj">Class object.</param>
            <param name="rule">Parse rule.</param>
            <param name="keys">Specify the keys that need to be save. </param>
            <param name="exactmatch">If true, any key failed to save from the fields will throw exception.</param>
            <param name="save">If true, everything changed will be saved to the config file immediately.</param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.SaveChanges">
            <summary>
            Save configs to the config file.
            </summary>
        </member>
        <member name="M:ConfigReadingLib.ConfigReader.Create(ConfigReadingLib.ConfigInfo[],System.String,System.String)">
            <summary>
            Create a new config file, write the specified configs. If the file specified is exist, it will be overwritten.
            </summary>
            <param name="configinfos">ConfigInfos.</param>
            <param name="path">The path Specified is exist.</param>
            <param name="symbol">Comment out symbol to set. Default is '//'.</param>
            <exception cref="T:ConfigReadingLib.BadConfException"></exception>
        </member>
        <member name="T:ConfigReadingLib.ParseToString">
            <summary>
            ParseToString
            </summary>
        </member>
        <member name="M:ConfigReadingLib.ParseToString.#ctor">
            <summary>
            Set the rules for parsing properties or fields' values to the config file.
            Default contains the following rules: type 'int', 'string'.
            <para>Class ParseToString can be used like above:</para>
            <para>var rule = new ParseToString() { [typeof(int)] = x => x.ToString() };</para>
            </summary>
        </member>
        <member name="T:ConfigReadingLib.ParseFromString">
            <summary>
            ParseFromString
            </summary>
        </member>
        <member name="M:ConfigReadingLib.ParseFromString.#ctor">
            <summary>
            Set the rules for parsing the config file to properties or fields' values.
            Default contains the following rules: type 'int', 'string'.
            <para>Class ParseToString can be used like above:</para>
            <para>var rule = new ParseFromString() { [typeof(int)] = x => int.Parse(x) };</para>
            </summary>
        </member>
    </members>
</doc>
